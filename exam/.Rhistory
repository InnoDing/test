# ========== 3. E[X]
E_X <- sum(omega_df$X * omega_df$nnp) / nnp_sum
cat("E[X] =", E_X, "\n")
# ========== 4. Var(X)
E_X2 <- sum((omega_df$X)^2 * omega_df$nnp) / nnp_sum
Var_X <- E_X2 - E_X^2
cat("Var(X) =", Var_X, "\n")
# ========== 5. 计算 log-likelihood
obs_data <- c(3,4,8,9,4,6,5,3,4,3,5,5,3,3,8,1,4,4,6,5)
log_likelihood <- sum( log( sapply(obs_data, pX) ) )
cat("Log-likelihood =", log_likelihood, "\n")
# ========== 1. 生成 pmf 函数 pX(x)
pX <- function(x) {
sum(omega_df$nnp[omega_df$X == x]) / nnp_sum
}
# ========== 2. P(X in {0,10,20,30,40,50})
vals <- c(0,10,20,30,40,50)
P_subset <- sum( sapply(vals, pX) )
cat("P(X in {0,10,20,30,40,50}) =", P_subset, "\n")
# ========== 3. E[X]
E_X <- sum(omega_df$X * omega_df$nnp) / nnp_sum
cat("E[X] =", E_X, "\n")
# ========== 4. Var(X)
E_X2 <- sum((omega_df$X)^2 * omega_df$nnp) / nnp_sum
Var_X <- E_X2 - E_X^2
cat("Var(X) =", Var_X, "\n")
# ========== 5. 计算 log-likelihood
obs_data <- c(3,4,8,9,4,6,5,3,4,3,5,5,3,3,8,1,4,4,6,5)
log_likelihood <- sum( log( sapply(obs_data, pX) ) )
cat("Log-likelihood =", log_likelihood, "\n")
# ========== 1. 生成 pmf 函数 pX(x)
pX <- function(x) {
sum(omega_df$nnp[omega_df$X == x]) / nnp_sum
}
# ========== 2. P(X in {0,10,20,30,40,50})
vals <- c(0,10,20,30,40,50)
P_subset <- sum( sapply(vals, pX) )
cat("P(X in {0,10,20,30,40,50}) =", P_subset, "\n")
# ========== 3. E[X]
E_X <- sum(omega_df$X * omega_df$nnp) / nnp_sum
cat("E[X] =", E_X, "\n")
# ========== 4. Var(X)
E_X2 <- sum((omega_df$X)^2 * omega_df$nnp) / nnp_sum
Var_X <- E_X2 - E_X^2
cat("Var(X) =", Var_X, "\n")
# ========== 5. 计算 log-likelihood
obs_data <- c(3,4,8,9,4,6,5,3,4,3,5,5,3,3,8,1,4,4,6,5)
log_likelihood <- sum( log( sapply(obs_data, pX) ) )
cat("Log-likelihood =", log_likelihood, "\n")
# ========== 1. 生成 pmf 函数 pX(x)
pX <- function(x) {
sum(omega_p$X == x) / nnp_sum
}
# ========== 2. P(X in {0,10,20,30,40,50})
vals <- c(0,10,20,30,40,50)
P_subset <- sum( sapply(vals, pX) )
cat("P(X in {0,10,20,30,40,50}) =", P_subset, "\n")
# ========== 3. E[X]
E_X <- sum(omega_df$X * omega_df$nnp) / nnp_sum
cat("E[X] =", E_X, "\n")
# ========== 4. Var(X)
E_X2 <- sum((omega_df$X)^2 * omega_df$nnp) / nnp_sum
Var_X <- E_X2 - E_X^2
cat("Var(X) =", Var_X, "\n")
# ========== 5. 计算 log-likelihood
obs_data <- c(3,4,8,9,4,6,5,3,4,3,5,5,3,3,8,1,4,4,6,5)
log_likelihood <- sum( log( sapply(obs_data, pX) ) )
cat("Log-likelihood =", log_likelihood, "\n")
# ========== 1. 生成 pmf 函数 pX(x)
pX <- function(x) {
sum(omega_df$p == x)
}
# ========== 2. P(X in {0,10,20,30,40,50})
vals <- c(0,10,20,30,40,50)
P_subset <- sum( sapply(vals, pX) )
cat("P(X in {0,10,20,30,40,50}) =", P_subset, "\n")
# ========== 3. E[X]
E_X <- sum(omega_df$X * omega_df$nnp) / nnp_sum
cat("E[X] =", E_X, "\n")
# ========== 4. Var(X)
E_X2 <- sum((omega_df$X)^2 * omega_df$nnp) / nnp_sum
Var_X <- E_X2 - E_X^2
cat("Var(X) =", Var_X, "\n")
# ========== 5. 计算 log-likelihood
obs_data <- c(3,4,8,9,4,6,5,3,4,3,5,5,3,3,8,1,4,4,6,5)
log_likelihood <- sum( log( sapply(obs_data, pX) ) )
cat("Log-likelihood =", log_likelihood, "\n")
pX(1)
omega_df$p
omega_df$p == 1
# ========== 1. 生成 pmf 函数 pX(x)
pX <- function(x) {
sum(omega_df$p = x)
}
# ========== 2. P(X in {0,10,20,30,40,50})
vals <- c(0,10,20,30,40,50)
P_subset <- sum( sapply(vals, pX) )
cat("P(X in {0,10,20,30,40,50}) =", P_subset, "\n")
# ========== 3. E[X]
E_X <- sum(omega_df$X * omega_df$nnp) / nnp_sum
cat("E[X] =", E_X, "\n")
# ========== 4. Var(X)
E_X2 <- sum((omega_df$X)^2 * omega_df$nnp) / nnp_sum
Var_X <- E_X2 - E_X^2
cat("Var(X) =", Var_X, "\n")
# ========== 5. 计算 log-likelihood
obs_data <- c(3,4,8,9,4,6,5,3,4,3,5,5,3,3,8,1,4,4,6,5)
log_likelihood <- sum( log( sapply(obs_data, pX) ) )
cat("Log-likelihood =", log_likelihood, "\n")
# ========== 1. 生成 pmf 函数 pX(x)
pX <- function(x) {
sum(omega_df[[x]])
}
# ========== 2. P(X in {0,10,20,30,40,50})
vals <- c(0,10,20,30,40,50)
P_subset <- sum( sapply(vals, pX) )
cat("P(X in {0,10,20,30,40,50}) =", P_subset, "\n")
# ========== 3. E[X]
E_X <- sum(omega_df$X * omega_df$nnp) / nnp_sum
cat("E[X] =", E_X, "\n")
# ========== 4. Var(X)
E_X2 <- sum((omega_df$X)^2 * omega_df$nnp) / nnp_sum
Var_X <- E_X2 - E_X^2
cat("Var(X) =", Var_X, "\n")
# ========== 5. 计算 log-likelihood
obs_data <- c(3,4,8,9,4,6,5,3,4,3,5,5,3,3,8,1,4,4,6,5)
log_likelihood <- sum( log( sapply(obs_data, pX) ) )
cat("Log-likelihood =", log_likelihood, "\n")
# ========== 1. 生成 pmf 函数 pX(x)
pX <- function(x) {
sum(omega_df$p[[x]])
}
# ========== 2. P(X in {0,10,20,30,40,50})
vals <- c(0,10,20,30,40,50)
P_subset <- sum( sapply(vals, pX) )
cat("P(X in {0,10,20,30,40,50}) =", P_subset, "\n")
# ========== 3. E[X]
E_X <- sum(omega_df$X * omega_df$nnp) / nnp_sum
cat("E[X] =", E_X, "\n")
# ========== 4. Var(X)
E_X2 <- sum((omega_df$X)^2 * omega_df$nnp) / nnp_sum
Var_X <- E_X2 - E_X^2
cat("Var(X) =", Var_X, "\n")
# ========== 5. 计算 log-likelihood
obs_data <- c(3,4,8,9,4,6,5,3,4,3,5,5,3,3,8,1,4,4,6,5)
log_likelihood <- sum( log( sapply(obs_data, pX) ) )
cat("Log-likelihood =", log_likelihood, "\n")
# ========== 1. 生成 pmf 函数 pX(x)
pX <- function(x) {
sum(omega_df$p[[x]])
}
# ========== 2. P(X in {0,10,20,30,40,50})
vals <- c(0,10,20,30,40,50)
P_subset <- sum( sapply(vals, pX) )
cat("P(X in {0,10,20,30,40,50}) =", P_subset, "\n")
# ========== 3. E[X]
E_X <- sum(omega_df$X * omega_df$nnp) / nnp_sum
cat("E[X] =", E_X, "\n")
# ========== 4. Var(X)
E_X2 <- sum((omega_df$X)^2 * omega_df$nnp) / nnp_sum
Var_X <- E_X2 - E_X^2
cat("Var(X) =", Var_X, "\n")
# ========== 5. 计算 log-likelihood
obs_data <- c(3,4,8,9,4,6,5,3,4,3,5,5,3,3,8,1,4,4,6,5)
log_likelihood <- sum( log( sapply(obs_data, pX) ) )
cat("Log-likelihood =", log_likelihood, "\n")
# ========== 1. 生成 pmf 函数 pX(x)
pX <- function(x) {
sum(omega_df$p[x])
}
# ========== 2. P(X in {0,10,20,30,40,50})
vals <- c(0,10,20,30,40,50)
P_subset <- sum( sapply(vals, pX) )
cat("P(X in {0,10,20,30,40,50}) =", P_subset, "\n")
# ========== 3. E[X]
E_X <- sum(omega_df$X * omega_df$nnp) / nnp_sum
cat("E[X] =", E_X, "\n")
# ========== 4. Var(X)
E_X2 <- sum((omega_df$X)^2 * omega_df$nnp) / nnp_sum
Var_X <- E_X2 - E_X^2
cat("Var(X) =", Var_X, "\n")
# ========== 5. 计算 log-likelihood
obs_data <- c(3,4,8,9,4,6,5,3,4,3,5,5,3,3,8,1,4,4,6,5)
log_likelihood <- sum( log( sapply(obs_data, pX) ) )
cat("Log-likelihood =", log_likelihood, "\n")
# ========== 1. 生成 pmf 函数 pX(x)
pX <- function(x) {
sum(omega_df$p[omega_df$X == x])
}
# ========== 2. P(X in {0,10,20,30,40,50})
vals <- c(0,10,20,30,40,50)
P_subset <- sum( sapply(vals, pX) )
cat("P(X in {0,10,20,30,40,50}) =", P_subset, "\n")
# ========== 3. E[X]
E_X <- sum(omega_df$X * omega_df$nnp) / nnp_sum
cat("E[X] =", E_X, "\n")
# ========== 4. Var(X)
E_X2 <- sum((omega_df$X)^2 * omega_df$nnp) / nnp_sum
Var_X <- E_X2 - E_X^2
cat("Var(X) =", Var_X, "\n")
# ========== 5. 计算 log-likelihood
obs_data <- c(3,4,8,9,4,6,5,3,4,3,5,5,3,3,8,1,4,4,6,5)
log_likelihood <- sum( log( sapply(obs_data, pX) ) )
cat("Log-likelihood =", log_likelihood, "\n")
# ========== 1. 生成 pmf 函数 pX(x)
pX <- function(x) {
sum(omega_df$p[omega_df$X == x])
}
# ========== 2. P(X in {0,10,20,30,40,50})
vals <- c(0,10,20,30,40,50)
P_subset <- sum( sapply(vals, pX) )
cat("P(X in {0,10,20,30,40,50}) =", P_subset, "\n")
# ========== 3. E[X]
E_X <- sum(omega_df$X * omega_df$nnp) / nnp_sum
cat("E[X] =", E_X, "\n")
E_X2 <- sum(omega_df$X * omega_df$nnp)
E_X2
# ========== 4. Var(X)
E_X2 <- sum((omega_df$X)^2 * omega_df$nnp) / nnp_sum
Var_X <- E_X2 - E_X^2
cat("Var(X) =", Var_X, "\n")
# ========== 5. 计算 log-likelihood
obs_data <- c(3,4,8,9,4,6,5,3,4,3,5,5,3,3,8,1,4,4,6,5)
log_likelihood <- sum( log( sapply(obs_data, pX) ) )
cat("Log-likelihood =", log_likelihood, "\n")
# ========== 1. 生成 pmf 函数 pX(x)
pX <- function(x) {
sum(omega_df$p[omega_df$X == x])
}
# ========== 2. P(X in {0,10,20,30,40,50})
vals <- c(0,10,20,30,40,50)
P_subset <- sum( sapply(vals, pX) )
cat("P(X in {0,10,20,30,40,50}) =", P_subset, "\n")
# ========== 3. E[X]
E_X <- sum(omega_df$X * omega_df$nnp) / nnp_sum
cat("E[X] =", E_X, "\n")
E_X2 <- sum(omega_df$X * omega_df$p)
E_X2
# ========== 4. Var(X)
E_X2 <- sum((omega_df$X)^2 * omega_df$nnp) / nnp_sum
Var_X <- E_X2 - E_X^2
cat("Var(X) =", Var_X, "\n")
# ========== 5. 计算 log-likelihood
obs_data <- c(3,4,8,9,4,6,5,3,4,3,5,5,3,3,8,1,4,4,6,5)
log_likelihood <- sum( log( sapply(obs_data, pX) ) )
cat("Log-likelihood =", log_likelihood, "\n")
# ========== 1. 生成 pmf 函数 pX(x)
pX <- function(x) {
sum(omega_df$p[omega_df$X == x])
}
# ========== 2. P(X in {0,10,20,30,40,50})
vals <- c(0,10,20,30,40,50)
P_subset <- sum( sapply(vals, pX) )
cat("P(X in {0,10,20,30,40,50}) =", P_subset, "\n")
# ========== 3. E[X]
E_X <- sum(omega_df$X * omega_df$p)
cat("E[X] =", E_X, "\n")
# ========== 4. Var(X)
E_X2 <- sum((omega_df$X)^2 * omega_df$nnp) / nnp_sum
Var_X <- E_X2 - E_X^2
cat("Var(X) =", Var_X, "\n")
# ========== 5. 计算 log-likelihood
obs_data <- c(3,4,8,9,4,6,5,3,4,3,5,5,3,3,8,1,4,4,6,5)
log_likelihood <- sum( log( sapply(obs_data, pX) ) )
cat("Log-likelihood =", log_likelihood, "\n")
c(3, 4, 8, 9, 4, 6, 5, 3, 4, 3, 5, 5, 3, 3, 8, 1, 4, 4, 6, 5)
E_X3
# ========== 1. 生成 pmf 函数 pX(x)
pX <- function(x) {
sum(omega_df$p[omega_df$X == x])
}
# ========== 2. P(X in {0,10,20,30,40,50})
vals <- c(0,10,20,30,40,50)
P_subset <- sum( sapply(vals, pX) )
cat("P(X in {0,10,20,30,40,50}) =", P_subset, "\n")
# ========== 3. E[X]
E_X <- sum(omega_df$X * omega_df$p)
cat("E[X] =", E_X, "\n")
# ========== 4. Var(X)
E_X2 <- sum((omega_df$X)^2 * omega_df$nnp) / nnp_sum
E_X3 <- sum((omega_df$X)^2 * omega_df$p)
Var_X <- E_X2 - E_X^2
cat("Var(X) =", Var_X, "\n")
# ========== 5. 计算 log-likelihood
obs_data <- c(3,4,8,9,4,6,5,3,4,3,5,5,3,3,8,1,4,4,6,5)
log_likelihood <- sum( log( sapply(obs_data, pX) ) )
cat("Log-likelihood =", log_likelihood, "\n")
E_X3
E_X2
# ========== 1. 生成 pmf 函数 pX(x)
pX <- function(x) {
sum(omega_df$p[omega_df$X == x])
}
# ========== 2. P(X in {0,10,20,30,40,50})
vals <- c(0,10,20,30,40,50)
P_subset <- sum( sapply(vals, pX) )
cat("P(X in {0,10,20,30,40,50}) =", P_subset, "\n")
# ========== 3. E[X]
E_X <- sum(omega_df$X * omega_df$p)
cat("E[X] =", E_X, "\n")
# ========== 4. Var(X)
E_X2 <- sum((omega_df$X)^2 * omega_df$p)
Var_X <- E_X2 - E_X^2
cat("Var(X) =", Var_X, "\n")
# ========== 5. 计算 log-likelihood
obs_data <- c(3,4,8,9,4,6,5,3,4,3,5,5,3,3,8,1,4,4,6,5)
log_likelihood <- sum( log( sapply(obs_data, pX) ) )
cat("Log-likelihood =", log_likelihood, "\n")
# 总和
nnp_1 <- omega_df$nnp[omega_df$element == 1]
p_fraction <- fractions(nnp_1 / nnp_sum)
p_fraction
# 总和
nnp_1 <- omega_df$nnp[omega_df$Z == 1]
p_fraction <- fractions(nnp_1 / nnp_sum)
p_fraction
# 总和
nnp_1 <- omega_df$nnp[omega_df$Z == 1]
p_fraction <- fractions(nnp_1 / nnp_sum)
p_fraction
p_fraction
# 总和
nnp_1 <- omega_df$nnp[omega_df$Z == 1]
p <- nnp_1 / nnp_sum
p_fraction <- fractions(nnp_1 / nnp_sum)
p_fraction
p
# 总和
nnp_1 <- sum(omega_df$nnp[omega_df$Z == 1])
p <- nnp_1 / nnp_sump
p_fraction <- fractions(nnp_1 / nnp_sum)
p_fraction
p
# 总和
nnp_1 <- sum(omega_df$nnp[omega_df$Z == 1])
p_fraction <- fractions(nnp_1 / nnp_sum)
p_fraction
# 总和
nnp_1 <- sum(omega_df$nnp[omega_df$Z == 1])
nnp_2 <- sum(omega_df$nnp[omega_df$Z != 1])
p_fraction1 <- fractions(nnp_1 / nnp_sum)
p_fraction2 <- fractions(nnp_2 / nnp_sum)
p_fraction1
p_fraction2
p_fraction2+p_fraction1
# 总和
nnp_1 <- sum(omega_df$nnp[omega_df$Z == 1])
nnp_0 <- sum(omega_df$nnp[omega_df$Z != 1])
p_fraction1 <- fractions(nnp_1 / nnp_sum)
p_fraction0 <- fractions(nnp_0 / nnp_sum)
p_fraction1
p_fraction0
library(MASS)
P_A <- fractions(S_A / nnp_sum)
P_B <- fractions(S_B / nnp_sum)
P_AuB <- fractions(S_AuB / nnp_sum)
P_AiB <- fractions(S_AiB / nnp_sum)
P_A_given_B <- fractions(P_AiB / S_B)
# 打印结果
P_A
P_B
P_AuB
P_AiB
P_A_given_B
library(MASS)
P_A <- fractions(S_A / nnp_sum)
P_B <- fractions(S_B / nnp_sum)
P_AuB <- fractions(S_AuB / nnp_sum)
P_AiB <- fractions(S_AiB / nnp_sum)
P_A_given_B <- fractions(P_AiB / S_B)
# 打印结果
P_A
P_B
P_AuB
P_AiB
P_A_given_B
knitr::opts_chunk$set(error = TRUE)
load("exam202425.RData")
# only the head is provided in the RData file
head(golub_head)
load("exam202425.RData")
writeLines(golub_model_summary)
test_cases <- data.frame(G2037=c(-1, -1, 1, 1), G2560=c(-1, 1, -1, 1), predicted_class=c(NA, NA, NA, NA))
test_cases
#my ku email xdn631@alumni.ku.dk
mynumber <- 631
mynumber
load("exam202425.RData")
dummy <- setup_omega(594)
head(dummy)
omega_df <- setup_omega(mynumber)
#calculate sum of nnp
nnp_sum <- sum(omega_df$nnp)
#add column p = nnp / nnp_sum
omega_df$p <- omega_df$nnp / nnp_sum
A <- c(1, 10, 100, 1000)
B <- c(2, 20, 200, 2000)
S_A <- sum(omega_df$nnp[omega_df$element %in% A])
S_B <- sum(omega_df$nnp[omega_df$element %in% B])
S_AiB <- 0
S_AuB <- S_A + S_B - S_AiB
knitr::opts_chunk$set(error = TRUE)
load("exam202425.RData")
# only the head is provided in the RData file
head(golub_head)
load("exam202425.RData")
writeLines(golub_model_summary)
test_cases <- data.frame(G2037=c(-1, -1, 1, 1), G2560=c(-1, 1, -1, 1), predicted_class=c(NA, NA, NA, NA))
test_cases
#my ku email xdn631@alumni.ku.dk
mynumber <- 631
mynumber
load("exam202425.RData")
dummy <- setup_omega(594)
head(dummy)
omega_df <- setup_omega(mynumber)
#calculate sum of nnp
nnp_sum <- sum(omega_df$nnp)
#add column p = nnp / nnp_sum
omega_df$p <- omega_df$nnp / nnp_sum
A <- c(1, 10, 100, 1000)
B <- c(2, 20, 200, 2000)
S_A <- sum(omega_df$nnp[omega_df$element %in% A])
S_B <- sum(omega_df$nnp[omega_df$element %in% B])
S_AiB <- 0
S_AuB <- S_A + S_B - S_AiB
P_B
S_B
library(MASS)
P_A <- fractions(S_A / nnp_sum)
P_B <- fractions(S_B / nnp_sum)
P_AuB <- fractions(S_AuB / nnp_sum)
P_AiB <- fractions(S_AiB / nnp_sum)
P_A_given_B <- fractions(P_AiB / S_B)
# 打印结果
P_A
P_B
P_AuB
P_AiB
P_A_given_B
library(MASS)
P_A <- fractions(S_A / nnp_sum)
P_B <- fractions(S_B / nnp_sum)
P_AuB <- fractions(S_AuB / nnp_sum)
P_AiB <- fractions(S_AiB / nnp_sum)
P_A_given_B <- fractions(P_AiB / S_B)
# 打印结果
P_A
P_B
P_AuB
P_AiB
P_A_given_B
S_A
S_B
library(MASS)
P_A <- fractions(S_A / nnp_sum)
P_B <- fractions(S_B / nnp_sum)
P_AuB <- fractions(S_AuB / nnp_sum)
P_AiB <- fractions(S_AiB / nnp_sum)
P_A_given_B <- fractions(0 / S_B)
# 打印结果
P_A
P_B
P_AuB
P_AiB
P_A_given_B
is_positive <- function(x) {
return(x > 0 & x <= 1)
}
all_positive <- all(sapply(omega_df$p, is_positive))
is_positive <- function(x) {
return(x > 0 & x <= 1)
}
all_positive <- all(sapply(omega_df$p, is_positive))
all_positive
is_positive <- function(x) {
return(x >= 0 & x <= 1)
}
all_positive <- all(sapply(omega_df$p, is_positive))
all_positive
P_Omega_check <- sum(omega_df$p)
isTRUE(all.equal(P_Omega_check, 1))
#3. E[X]
E_X <- sum(omega_df$X * omega_df$p)
cat("E[X] =", E_X, "\n")
# 总和
nnp_1 <- sum(omega_df$nnp[omega_df$Z == 1])
nnp_0 <- sum(omega_df$nnp[omega_df$Z != 1])
p_fraction1 <- fractions(nnp_1 / nnp_sum)
p_fraction0 <- fractions(nnp_0 / nnp_sum)
p_fraction1
p_fraction0
isTRUE(all.equal(1,p_fraction1+p_fraction0)
isTRUE(all.equal(1,p_fraction1+p_fraction0)
nnp_1 <- sum(omega_df$nnp[omega_df$Z == 1])
nnp_0 <- sum(omega_df$nnp[omega_df$Z != 1])
p_fraction1 <- fractions(nnp_1 / nnp_sum)
p_fraction0 <- fractions(nnp_0 / nnp_sum)
p_fraction1
p_fraction0
p_fraction1
p_fraction0
nnp_1 <- sum(omega_df$nnp[omega_df$Z == 1])
nnp_0 <- sum(omega_df$nnp[omega_df$Z != 1])
p_fraction1 <- fractions(nnp_1 / nnp_sum)
p_fraction0 <- fractions(nnp_0 / nnp_sum)
p_fraction1
p_fraction0
isTRUE(all.equal(1,p_fraction1+p_fraction0)
isTRUE(all.equal(1, p_fraction1 + p_fraction0))
p_fraction1 + p_fraction0
p_fraction1 + p_fraction0
