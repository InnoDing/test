sample(c("red", "blue"), size = 1, prob = c(0.25, 0.75))
sample(c("red", "blue"), size = 1, prob = c(0.25, 0.75))
sample(c("red", "blue"), size = 1, prob = c(0.25, 0.75))
sample(c("red", "blue"), size = 1, prob = c(0.25, 0.75))
sample(1:10, size = 1, prob = 1:10)
sample(1:10, size = 1, prob = 1:10)
sample(1:10, size = 1, prob = 1:10)
rollDie <- function(n) {
return(sample(n, size = 1))
}
rollDie <- function(n) {
return(sample(n, size = 1))
}
sample(c("heads", "tails"), size = 10, replace = TRUE)
rollDie(5)
# sample one value from {1,2,3} with equal probability
sample(1:3, size = 1)
# sample one value from {1,2,3} with equal probability
sample(1:3, size = 2)
# sample one value from {1,2,3} with equal probability
sample(1:3, size = 2)
sample(c("heads", "tails"), size = 10, replace = TRUE)
sample(c("heads", "tails"), size = 10, replace = TRUE)
no_heads <- function(n) {
coin_flips <- replicate(n, rollDie(2))
return(sum(coin_flips == 2))
}
no_heads(5)
no_heads <- function(n) {
coin_flips <- replicate(n, rollDie(2))
return(sum(coin_flips == 2))
}
randomGenotype <- function(alleles = c("i", "A", "B")) {
sample(alleles, size = 2, replace = T)
}
randomGenotype()
genotype2phenotype <- function(genotype) {
if (all(genotype == "i")) {
return("Type O")
} else if ("i" %in% genotype) {
return(paste("Type", genotype[genotype != "i"]))
} else if (genotype[1] == genotype[2]) {
return(paste("Type", genotype[1]))
} else{
return("Type AB")
}
}
genotype2phenotype <- function(genotype) {
if (all(genotype == "i")) {
return("Type O")
} else if ("i" %in% genotype) {
return(paste("Type", genotype[genotype != "i"]))
} else if (genotype[1] == genotype[2]) {
return(paste("Type", genotype[1]))
} else{
return("Type AB")
}
}
genotype2phenotype(c("i", "i"))
randomOffspring <- function(parent1, parent2) {
c(sample(parent1, size = 1), sample(parent2, size = 1))
}
p1 <- randomGenotype()
p2 <- randomGenotype()
randomOffspring(p1, p2)
randomOffspring <- function(parent1, parent2) {
c(sample(parent1, size = 1), sample(parent2, size = 1))
}
p1 <- randomGenotype()
p2 <- randomGenotype()
randomOffspring(p1, p2)
randomOffspring <- function(parent1, parent2) {
c(sample(parent1, size = 1), sample(parent2, size = 1))
}
p1 <- randomGenotype()
p2 <- randomGenotype()
randomOffspring(p1, p2)
randomOffspring <- function(parent1, parent2) {
c(sample(parent1, size = 1), sample(parent2, size = 1))
}
p1 <- randomGenotype()
p2 <- randomGenotype()
randomOffspring(p1, p2)
parent1 <- c("i", "i^A")
parent2 <- c("i", "i^A")
offspring <- apply(
expand.grid(parent1, parent2),
MARGIN = 1,
FUN = function(x) {
return(paste(x[1], x[2]))
}
)
matrix(
data = offspring ,
nrow = 2,
dimnames = list(parent1 = parent1, parent2 = parent2)
)
parent1 <- c("i", "i^A")
parent2 <- c("i", "i^A")
offspring <- apply(
expand.grid(parent1, parent2),
MARGIN = 1,
FUN = function(x) {
return(paste(x[1], x[2]))
}
)
matrix(
data = offspring ,
nrow = 2,
dimnames = list(parent1 = parent1, parent2 = parent2)
)
parent1 <- c("i", "A")
parent2 <- c("i", "A")
N <- 10000
offsprings <- t(replicate(N, randomOffspring(parent1, parent2)))
# both alleles are i
pii_est <- nrow(offsprings[offsprings[, 1] == "i" &
offsprings[, 2] == "i", ]) / N
pii_est
parent1 <- c("i", "A")
parent2 <- c("i", "A")
N <- 10000
offsprings <- t(replicate(N, randomOffspring(parent1, parent2)))
# both alleles are i
pii_est <- nrow(offsprings[offsprings[, 1] == "i" &
offsprings[, 2] == "i", ]) / N
pii_est
parent1 <- c("i", "A")
parent2 <- c("i", "A")
N <- 10000
offsprings <- t(replicate(N, randomOffspring(parent1, parent2)))
# both alleles are i
pii_est <- nrow(offsprings[offsprings[, 1] == "i" &
offsprings[, 2] == "i", ]) / N
pii_est
parent1 <- c("i", "A")
parent2 <- c("i", "A")
N <- 10000
offsprings <- t(replicate(N, randomOffspring(parent1, parent2)))
# both alleles are i
pii_est <- nrow(offsprings[offsprings[, 1] == "i" &
offsprings[, 2] == "i", ]) / N
pii_est
# at least one allele is i
pi_est <- nrow(offsprings[offsprings[, 1] == "i" |
offsprings[, 2] == "i", ]) / N
pi_est
parent1 <- c("i", "A")
parent2 <- c("i", "A")
N <- 10000
offsprings <- t(replicate(N, randomOffspring(parent1, parent2)))
# both alleles are i
pii_est <- nrow(offsprings[offsprings[, 1] == "i" &
offsprings[, 2] == "i", ]) / N
pii_est
table_genotypes <- table(apply(offsprings, 1, paste, collapse = " "))
barplot(table_genotypes / N, main = "基因型比例", ylab = "频率")
parent1 <- c("i", "A")
parent2 <- c("i", "A")
N <- 10000
offsprings <- t(replicate(N, randomOffspring(parent1, parent2)))
# both alleles are i
pii_est <- nrow(offsprings[offsprings[, 1] == "i" &
offsprings[, 2] == "i", ]) / N
pii_est
table_genotypes <- table(apply(offsprings, 1, paste, collapse = " "))
barplot(table_genotypes / N, main = "基因型比例", ylab = "频率")
parent1 <- c("i", "A")
parent2 <- c("i", "A")
N <- 10000
offsprings <- t(replicate(N, randomOffspring(parent1, parent2)))
# both alleles are i
pii_est <- nrow(offsprings[offsprings[, 1] == "i" &
offsprings[, 2] == "i", ]) / N
pii_est
table_genotypes <- table(apply(offsprings, 1, paste, collapse = " "))
barplot(table_genotypes / N, main = "基因型比例", ylab = "频率")
offsprings
offsprings[offsprings[, 1] == "i" &
offsprings[, 2] == "i", ]
